<?php
/**
 * DocumentApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Docbox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DOCBOX® API
 *
 * The DOCBOX® REST API makes it possible to integrate the DOCBOX® into third-party programs such as ERP or CRM applications. The third-party programs can access certain DOCBOX® functions, for example to archive documents in the DOCBOX® or to search for documents in it.  The api is available under https://{docbox-host}:{api-port}/api/v2. The default port is 8081 and should not be mistaken with the port of the webapp.  To authenticate to the API you must pass the API-Key header. Api keys can be configured by administrators in the modules->API section. If you are using the cloud version of DOCBOX® you must also pass the Cloud-ID header with your Cloudid.
 *
 * The version of the OpenAPI document: 7.6.0
 * Contact: support@docbox.eu
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Docbox\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Docbox\ApiException;
use OpenAPI\Client\Docbox\Configuration;
use OpenAPI\Client\Docbox\HeaderSelector;
use OpenAPI\Client\Docbox\ObjectSerializer;

/**
 * DocumentApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Docbox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'documentArchive' => [
            'application/x-www-form-urlencoded',
        ],
        'documentAutoExportStatus' => [
            'application/x-www-form-urlencoded',
        ],
        'documentData' => [
            'application/json',
        ],
        'documentIdDeletePost' => [
            'application/json',
        ],
        'documentIdReplacePost' => [
            'multipart/form-data',
        ],
        'documentKeywordsPost' => [
            'application/json',
        ],
        'documentList' => [
            'application/json',
        ],
        'documentMetadataGet' => [
            'application/json',
        ],
        'documentMetadataPost' => [
            'application/json',
        ],
        'documentOcrResult' => [
            'application/json',
        ],
        'documentPdf' => [
            'application/json',
        ],
        'documentRename' => [
            'application/x-www-form-urlencoded',
        ],
        'documentUploadedWith' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation documentArchive
     *
     * Archives a INBOX-document
     *
     * @param  int $id Document id (required)
     * @param  int $target_folder_id Id of the target folder. Either this or &#x60;target-folder-path&#x60; is required. (optional)
     * @param  string $target_mandator_name Name of the mandator where the document should be archived (optional)
     * @param  string $target_folder_path Path to the target folder starting at the mandator. Either this or &#x60;target-folder-id&#x60; is required. Example: \\\&quot;/Eingangsrechnungen/2018/\\\&quot; (optional)
     * @param  string $target_document_name Name of the new created archive-document. If not present, the current name of the document is used. (optional)
     * @param  string $keywords Comma separated list of keywords, which get added to the document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentArchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function documentArchive($id, $target_folder_id = null, $target_mandator_name = null, $target_folder_path = null, $target_document_name = null, $keywords = null, string $contentType = self::contentTypes['documentArchive'][0])
    {
        $this->documentArchiveWithHttpInfo($id, $target_folder_id, $target_mandator_name, $target_folder_path, $target_document_name, $keywords, $contentType);
    }

    /**
     * Operation documentArchiveWithHttpInfo
     *
     * Archives a INBOX-document
     *
     * @param  int $id Document id (required)
     * @param  int $target_folder_id Id of the target folder. Either this or &#x60;target-folder-path&#x60; is required. (optional)
     * @param  string $target_mandator_name Name of the mandator where the document should be archived (optional)
     * @param  string $target_folder_path Path to the target folder starting at the mandator. Either this or &#x60;target-folder-id&#x60; is required. Example: \\\&quot;/Eingangsrechnungen/2018/\\\&quot; (optional)
     * @param  string $target_document_name Name of the new created archive-document. If not present, the current name of the document is used. (optional)
     * @param  string $keywords Comma separated list of keywords, which get added to the document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentArchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentArchiveWithHttpInfo($id, $target_folder_id = null, $target_mandator_name = null, $target_folder_path = null, $target_document_name = null, $keywords = null, string $contentType = self::contentTypes['documentArchive'][0])
    {
        $request = $this->documentArchiveRequest($id, $target_folder_id, $target_mandator_name, $target_folder_path, $target_document_name, $keywords, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation documentArchiveAsync
     *
     * Archives a INBOX-document
     *
     * @param  int $id Document id (required)
     * @param  int $target_folder_id Id of the target folder. Either this or &#x60;target-folder-path&#x60; is required. (optional)
     * @param  string $target_mandator_name Name of the mandator where the document should be archived (optional)
     * @param  string $target_folder_path Path to the target folder starting at the mandator. Either this or &#x60;target-folder-id&#x60; is required. Example: \\\&quot;/Eingangsrechnungen/2018/\\\&quot; (optional)
     * @param  string $target_document_name Name of the new created archive-document. If not present, the current name of the document is used. (optional)
     * @param  string $keywords Comma separated list of keywords, which get added to the document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentArchiveAsync($id, $target_folder_id = null, $target_mandator_name = null, $target_folder_path = null, $target_document_name = null, $keywords = null, string $contentType = self::contentTypes['documentArchive'][0])
    {
        return $this->documentArchiveAsyncWithHttpInfo($id, $target_folder_id, $target_mandator_name, $target_folder_path, $target_document_name, $keywords, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentArchiveAsyncWithHttpInfo
     *
     * Archives a INBOX-document
     *
     * @param  int $id Document id (required)
     * @param  int $target_folder_id Id of the target folder. Either this or &#x60;target-folder-path&#x60; is required. (optional)
     * @param  string $target_mandator_name Name of the mandator where the document should be archived (optional)
     * @param  string $target_folder_path Path to the target folder starting at the mandator. Either this or &#x60;target-folder-id&#x60; is required. Example: \\\&quot;/Eingangsrechnungen/2018/\\\&quot; (optional)
     * @param  string $target_document_name Name of the new created archive-document. If not present, the current name of the document is used. (optional)
     * @param  string $keywords Comma separated list of keywords, which get added to the document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentArchiveAsyncWithHttpInfo($id, $target_folder_id = null, $target_mandator_name = null, $target_folder_path = null, $target_document_name = null, $keywords = null, string $contentType = self::contentTypes['documentArchive'][0])
    {
        $returnType = '';
        $request = $this->documentArchiveRequest($id, $target_folder_id, $target_mandator_name, $target_folder_path, $target_document_name, $keywords, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentArchive'
     *
     * @param  int $id Document id (required)
     * @param  int $target_folder_id Id of the target folder. Either this or &#x60;target-folder-path&#x60; is required. (optional)
     * @param  string $target_mandator_name Name of the mandator where the document should be archived (optional)
     * @param  string $target_folder_path Path to the target folder starting at the mandator. Either this or &#x60;target-folder-id&#x60; is required. Example: \\\&quot;/Eingangsrechnungen/2018/\\\&quot; (optional)
     * @param  string $target_document_name Name of the new created archive-document. If not present, the current name of the document is used. (optional)
     * @param  string $keywords Comma separated list of keywords, which get added to the document. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentArchiveRequest($id, $target_folder_id = null, $target_mandator_name = null, $target_folder_path = null, $target_document_name = null, $keywords = null, string $contentType = self::contentTypes['documentArchive'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentArchive'
            );
        }







        $resourcePath = '/document/{id}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($target_folder_id !== null) {
            $formParams['target-folder-id'] = ObjectSerializer::toFormValue($target_folder_id);
        }
        // form params
        if ($target_mandator_name !== null) {
            $formParams['target-mandator-name'] = ObjectSerializer::toFormValue($target_mandator_name);
        }
        // form params
        if ($target_folder_path !== null) {
            $formParams['target-folder-path'] = ObjectSerializer::toFormValue($target_folder_path);
        }
        // form params
        if ($target_document_name !== null) {
            $formParams['target-document-name'] = ObjectSerializer::toFormValue($target_document_name);
        }
        // form params
        if ($keywords !== null) {
            $formParams['keywords'] = ObjectSerializer::toFormValue($keywords);
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentAutoExportStatus
     *
     * Set auto export status
     *
     * @param  int $document_id document_id (required)
     * @param  bool $autoexport_status autoexport_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentAutoExportStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function documentAutoExportStatus($document_id, $autoexport_status, string $contentType = self::contentTypes['documentAutoExportStatus'][0])
    {
        $this->documentAutoExportStatusWithHttpInfo($document_id, $autoexport_status, $contentType);
    }

    /**
     * Operation documentAutoExportStatusWithHttpInfo
     *
     * Set auto export status
     *
     * @param  int $document_id (required)
     * @param  bool $autoexport_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentAutoExportStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentAutoExportStatusWithHttpInfo($document_id, $autoexport_status, string $contentType = self::contentTypes['documentAutoExportStatus'][0])
    {
        $request = $this->documentAutoExportStatusRequest($document_id, $autoexport_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation documentAutoExportStatusAsync
     *
     * Set auto export status
     *
     * @param  int $document_id (required)
     * @param  bool $autoexport_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentAutoExportStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentAutoExportStatusAsync($document_id, $autoexport_status, string $contentType = self::contentTypes['documentAutoExportStatus'][0])
    {
        return $this->documentAutoExportStatusAsyncWithHttpInfo($document_id, $autoexport_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentAutoExportStatusAsyncWithHttpInfo
     *
     * Set auto export status
     *
     * @param  int $document_id (required)
     * @param  bool $autoexport_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentAutoExportStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentAutoExportStatusAsyncWithHttpInfo($document_id, $autoexport_status, string $contentType = self::contentTypes['documentAutoExportStatus'][0])
    {
        $returnType = '';
        $request = $this->documentAutoExportStatusRequest($document_id, $autoexport_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentAutoExportStatus'
     *
     * @param  int $document_id (required)
     * @param  bool $autoexport_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentAutoExportStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentAutoExportStatusRequest($document_id, $autoexport_status, string $contentType = self::contentTypes['documentAutoExportStatus'][0])
    {

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling documentAutoExportStatus'
            );
        }

        // verify the required parameter 'autoexport_status' is set
        if ($autoexport_status === null || (is_array($autoexport_status) && count($autoexport_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoexport_status when calling documentAutoExportStatus'
            );
        }


        $resourcePath = '/document/auto_export_status/set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($document_id !== null) {
            $formParams['document-id'] = ObjectSerializer::toFormValue($document_id);
        }
        // form params
        if ($autoexport_status !== null) {
            $formParams['autoexport-status'] = ObjectSerializer::toFormValue($autoexport_status);
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentData
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Docbox\Model\ExtendedDocument
     */
    public function documentData($id, string $contentType = self::contentTypes['documentData'][0])
    {
        list($response) = $this->documentDataWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation documentDataWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Docbox\Model\ExtendedDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentDataWithHttpInfo($id, string $contentType = self::contentTypes['documentData'][0])
    {
        $request = $this->documentDataRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Docbox\Model\ExtendedDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Docbox\Model\ExtendedDocument' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Docbox\Model\ExtendedDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Docbox\Model\ExtendedDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Docbox\Model\ExtendedDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentDataAsync
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentDataAsync($id, string $contentType = self::contentTypes['documentData'][0])
    {
        return $this->documentDataAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentDataAsyncWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentDataAsyncWithHttpInfo($id, string $contentType = self::contentTypes['documentData'][0])
    {
        $returnType = '\OpenAPI\Client\Docbox\Model\ExtendedDocument';
        $request = $this->documentDataRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentData'
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentDataRequest($id, string $contentType = self::contentTypes['documentData'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentData'
            );
        }


        $resourcePath = '/document/{id}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdDeletePost
     *
     * Deletes a inbox document
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdDeletePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function documentIdDeletePost($id, string $contentType = self::contentTypes['documentIdDeletePost'][0])
    {
        $this->documentIdDeletePostWithHttpInfo($id, $contentType);
    }

    /**
     * Operation documentIdDeletePostWithHttpInfo
     *
     * Deletes a inbox document
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdDeletePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdDeletePostWithHttpInfo($id, string $contentType = self::contentTypes['documentIdDeletePost'][0])
    {
        $request = $this->documentIdDeletePostRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation documentIdDeletePostAsync
     *
     * Deletes a inbox document
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdDeletePostAsync($id, string $contentType = self::contentTypes['documentIdDeletePost'][0])
    {
        return $this->documentIdDeletePostAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdDeletePostAsyncWithHttpInfo
     *
     * Deletes a inbox document
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdDeletePostAsyncWithHttpInfo($id, string $contentType = self::contentTypes['documentIdDeletePost'][0])
    {
        $returnType = '';
        $request = $this->documentIdDeletePostRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdDeletePost'
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdDeletePostRequest($id, string $contentType = self::contentTypes['documentIdDeletePost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdDeletePost'
            );
        }


        $resourcePath = '/document/{id}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdReplacePost
     *
     * Replaces a document in Inbox.
     *
     * @param  int $id Document id (required)
     * @param  string $keywords Comma separated list of keywords to set for the new document. Commas can be escaped by prepending \\\\. (optional)
     * @param  \SplFileObject $upload_data The file to upload. Either this or &#x60;upload-data-base64&#x60; is required. (optional)
     * @param  string $upload_data_base64 Base64 encoded content of the upload-data. When using this parameter &#x60;target-document-name&#x60; is required. Either this or &#x60;upload-data&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdReplacePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function documentIdReplacePost($id, $keywords = null, $upload_data = null, $upload_data_base64 = null, string $contentType = self::contentTypes['documentIdReplacePost'][0])
    {
        $this->documentIdReplacePostWithHttpInfo($id, $keywords, $upload_data, $upload_data_base64, $contentType);
    }

    /**
     * Operation documentIdReplacePostWithHttpInfo
     *
     * Replaces a document in Inbox.
     *
     * @param  int $id Document id (required)
     * @param  string $keywords Comma separated list of keywords to set for the new document. Commas can be escaped by prepending \\\\. (optional)
     * @param  \SplFileObject $upload_data The file to upload. Either this or &#x60;upload-data-base64&#x60; is required. (optional)
     * @param  string $upload_data_base64 Base64 encoded content of the upload-data. When using this parameter &#x60;target-document-name&#x60; is required. Either this or &#x60;upload-data&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdReplacePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdReplacePostWithHttpInfo($id, $keywords = null, $upload_data = null, $upload_data_base64 = null, string $contentType = self::contentTypes['documentIdReplacePost'][0])
    {
        $request = $this->documentIdReplacePostRequest($id, $keywords, $upload_data, $upload_data_base64, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation documentIdReplacePostAsync
     *
     * Replaces a document in Inbox.
     *
     * @param  int $id Document id (required)
     * @param  string $keywords Comma separated list of keywords to set for the new document. Commas can be escaped by prepending \\\\. (optional)
     * @param  \SplFileObject $upload_data The file to upload. Either this or &#x60;upload-data-base64&#x60; is required. (optional)
     * @param  string $upload_data_base64 Base64 encoded content of the upload-data. When using this parameter &#x60;target-document-name&#x60; is required. Either this or &#x60;upload-data&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdReplacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdReplacePostAsync($id, $keywords = null, $upload_data = null, $upload_data_base64 = null, string $contentType = self::contentTypes['documentIdReplacePost'][0])
    {
        return $this->documentIdReplacePostAsyncWithHttpInfo($id, $keywords, $upload_data, $upload_data_base64, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdReplacePostAsyncWithHttpInfo
     *
     * Replaces a document in Inbox.
     *
     * @param  int $id Document id (required)
     * @param  string $keywords Comma separated list of keywords to set for the new document. Commas can be escaped by prepending \\\\. (optional)
     * @param  \SplFileObject $upload_data The file to upload. Either this or &#x60;upload-data-base64&#x60; is required. (optional)
     * @param  string $upload_data_base64 Base64 encoded content of the upload-data. When using this parameter &#x60;target-document-name&#x60; is required. Either this or &#x60;upload-data&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdReplacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdReplacePostAsyncWithHttpInfo($id, $keywords = null, $upload_data = null, $upload_data_base64 = null, string $contentType = self::contentTypes['documentIdReplacePost'][0])
    {
        $returnType = '';
        $request = $this->documentIdReplacePostRequest($id, $keywords, $upload_data, $upload_data_base64, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdReplacePost'
     *
     * @param  int $id Document id (required)
     * @param  string $keywords Comma separated list of keywords to set for the new document. Commas can be escaped by prepending \\\\. (optional)
     * @param  \SplFileObject $upload_data The file to upload. Either this or &#x60;upload-data-base64&#x60; is required. (optional)
     * @param  string $upload_data_base64 Base64 encoded content of the upload-data. When using this parameter &#x60;target-document-name&#x60; is required. Either this or &#x60;upload-data&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdReplacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdReplacePostRequest($id, $keywords = null, $upload_data = null, $upload_data_base64 = null, string $contentType = self::contentTypes['documentIdReplacePost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdReplacePost'
            );
        }





        $resourcePath = '/document/{id}/replace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keywords,
            'keywords', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($upload_data !== null) {
            $multipart = true;
            $formParams['upload-data'] = [];
            $paramFiles = is_array($upload_data) ? $upload_data : [$upload_data];
            foreach ($paramFiles as $paramFile) {
                $formParams['upload-data'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($upload_data_base64 !== null) {
            $formParams['upload-data-base64'] = ObjectSerializer::toFormValue($upload_data_base64);
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentKeywordsPost
     *
     * @param  int $id Document id (required)
     * @param  string[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentKeywordsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function documentKeywordsPost($id, $request_body, string $contentType = self::contentTypes['documentKeywordsPost'][0])
    {
        $this->documentKeywordsPostWithHttpInfo($id, $request_body, $contentType);
    }

    /**
     * Operation documentKeywordsPostWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentKeywordsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentKeywordsPostWithHttpInfo($id, $request_body, string $contentType = self::contentTypes['documentKeywordsPost'][0])
    {
        $request = $this->documentKeywordsPostRequest($id, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation documentKeywordsPostAsync
     *
     * @param  int $id Document id (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentKeywordsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentKeywordsPostAsync($id, $request_body, string $contentType = self::contentTypes['documentKeywordsPost'][0])
    {
        return $this->documentKeywordsPostAsyncWithHttpInfo($id, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentKeywordsPostAsyncWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentKeywordsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentKeywordsPostAsyncWithHttpInfo($id, $request_body, string $contentType = self::contentTypes['documentKeywordsPost'][0])
    {
        $returnType = '';
        $request = $this->documentKeywordsPostRequest($id, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentKeywordsPost'
     *
     * @param  int $id Document id (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentKeywordsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentKeywordsPostRequest($id, $request_body, string $contentType = self::contentTypes['documentKeywordsPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentKeywordsPost'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling documentKeywordsPost'
            );
        }


        $resourcePath = '/document/{id}/keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentList
     *
     * Document list
     *
     * @param  int $folder_id folder_id (required)
     * @param  string $included_metadata_keys included_metadata_keys (optional)
     * @param  string $excluded_matadata_keys excluded_matadata_keys (optional)
     * @param  bool $with_autoexport_status with_autoexport_status (optional)
     * @param  \DateTime $filter_date_created_after filter_date_created_after (optional)
     * @param  bool $subfolders_recursive subfolders_recursive (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Docbox\Model\Document[]
     */
    public function documentList($folder_id, $included_metadata_keys = null, $excluded_matadata_keys = null, $with_autoexport_status = null, $filter_date_created_after = null, $subfolders_recursive = false, string $contentType = self::contentTypes['documentList'][0])
    {
        list($response) = $this->documentListWithHttpInfo($folder_id, $included_metadata_keys, $excluded_matadata_keys, $with_autoexport_status, $filter_date_created_after, $subfolders_recursive, $contentType);
        return $response;
    }

    /**
     * Operation documentListWithHttpInfo
     *
     * Document list
     *
     * @param  int $folder_id (required)
     * @param  string $included_metadata_keys (optional)
     * @param  string $excluded_matadata_keys (optional)
     * @param  bool $with_autoexport_status (optional)
     * @param  \DateTime $filter_date_created_after (optional)
     * @param  bool $subfolders_recursive (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Docbox\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function documentListWithHttpInfo($folder_id, $included_metadata_keys = null, $excluded_matadata_keys = null, $with_autoexport_status = null, $filter_date_created_after = null, $subfolders_recursive = false, string $contentType = self::contentTypes['documentList'][0])
    {
        $request = $this->documentListRequest($folder_id, $included_metadata_keys, $excluded_matadata_keys, $with_autoexport_status, $filter_date_created_after, $subfolders_recursive, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Docbox\Model\Document[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Docbox\Model\Document[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Docbox\Model\Document[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Docbox\Model\Document[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Docbox\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentListAsync
     *
     * Document list
     *
     * @param  int $folder_id (required)
     * @param  string $included_metadata_keys (optional)
     * @param  string $excluded_matadata_keys (optional)
     * @param  bool $with_autoexport_status (optional)
     * @param  \DateTime $filter_date_created_after (optional)
     * @param  bool $subfolders_recursive (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentListAsync($folder_id, $included_metadata_keys = null, $excluded_matadata_keys = null, $with_autoexport_status = null, $filter_date_created_after = null, $subfolders_recursive = false, string $contentType = self::contentTypes['documentList'][0])
    {
        return $this->documentListAsyncWithHttpInfo($folder_id, $included_metadata_keys, $excluded_matadata_keys, $with_autoexport_status, $filter_date_created_after, $subfolders_recursive, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentListAsyncWithHttpInfo
     *
     * Document list
     *
     * @param  int $folder_id (required)
     * @param  string $included_metadata_keys (optional)
     * @param  string $excluded_matadata_keys (optional)
     * @param  bool $with_autoexport_status (optional)
     * @param  \DateTime $filter_date_created_after (optional)
     * @param  bool $subfolders_recursive (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentListAsyncWithHttpInfo($folder_id, $included_metadata_keys = null, $excluded_matadata_keys = null, $with_autoexport_status = null, $filter_date_created_after = null, $subfolders_recursive = false, string $contentType = self::contentTypes['documentList'][0])
    {
        $returnType = '\OpenAPI\Client\Docbox\Model\Document[]';
        $request = $this->documentListRequest($folder_id, $included_metadata_keys, $excluded_matadata_keys, $with_autoexport_status, $filter_date_created_after, $subfolders_recursive, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentList'
     *
     * @param  int $folder_id (required)
     * @param  string $included_metadata_keys (optional)
     * @param  string $excluded_matadata_keys (optional)
     * @param  bool $with_autoexport_status (optional)
     * @param  \DateTime $filter_date_created_after (optional)
     * @param  bool $subfolders_recursive (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentListRequest($folder_id, $included_metadata_keys = null, $excluded_matadata_keys = null, $with_autoexport_status = null, $filter_date_created_after = null, $subfolders_recursive = false, string $contentType = self::contentTypes['documentList'][0])
    {

        // verify the required parameter 'folder_id' is set
        if ($folder_id === null || (is_array($folder_id) && count($folder_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder_id when calling documentList'
            );
        }







        $resourcePath = '/document/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $folder_id,
            'folder-id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $included_metadata_keys,
            'included-metadata-keys', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excluded_matadata_keys,
            'excluded-matadata-keys', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_autoexport_status,
            'with-autoexport-status', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_date_created_after,
            'filter-date-created-after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subfolders_recursive,
            'subfolders-recursive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentMetadataGet
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,string>
     */
    public function documentMetadataGet($id, string $contentType = self::contentTypes['documentMetadataGet'][0])
    {
        list($response) = $this->documentMetadataGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation documentMetadataGetWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,string>, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentMetadataGetWithHttpInfo($id, string $contentType = self::contentTypes['documentMetadataGet'][0])
    {
        $request = $this->documentMetadataGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,string>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentMetadataGetAsync
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentMetadataGetAsync($id, string $contentType = self::contentTypes['documentMetadataGet'][0])
    {
        return $this->documentMetadataGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentMetadataGetAsyncWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentMetadataGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['documentMetadataGet'][0])
    {
        $returnType = 'array<string,string>';
        $request = $this->documentMetadataGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentMetadataGet'
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentMetadataGetRequest($id, string $contentType = self::contentTypes['documentMetadataGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentMetadataGet'
            );
        }


        $resourcePath = '/document/{id}/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentMetadataPost
     *
     * @param  int $id Document id (required)
     * @param  array<string,string> $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function documentMetadataPost($id, $request_body, string $contentType = self::contentTypes['documentMetadataPost'][0])
    {
        $this->documentMetadataPostWithHttpInfo($id, $request_body, $contentType);
    }

    /**
     * Operation documentMetadataPostWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  array<string,string> $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentMetadataPostWithHttpInfo($id, $request_body, string $contentType = self::contentTypes['documentMetadataPost'][0])
    {
        $request = $this->documentMetadataPostRequest($id, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation documentMetadataPostAsync
     *
     * @param  int $id Document id (required)
     * @param  array<string,string> $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentMetadataPostAsync($id, $request_body, string $contentType = self::contentTypes['documentMetadataPost'][0])
    {
        return $this->documentMetadataPostAsyncWithHttpInfo($id, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentMetadataPostAsyncWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  array<string,string> $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentMetadataPostAsyncWithHttpInfo($id, $request_body, string $contentType = self::contentTypes['documentMetadataPost'][0])
    {
        $returnType = '';
        $request = $this->documentMetadataPostRequest($id, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentMetadataPost'
     *
     * @param  int $id Document id (required)
     * @param  array<string,string> $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentMetadataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentMetadataPostRequest($id, $request_body, string $contentType = self::contentTypes['documentMetadataPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentMetadataPost'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling documentMetadataPost'
            );
        }


        $resourcePath = '/document/{id}/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentOcrResult
     *
     * Returns the OCR-result of a document
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentOcrResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function documentOcrResult($id, string $contentType = self::contentTypes['documentOcrResult'][0])
    {
        list($response) = $this->documentOcrResultWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation documentOcrResultWithHttpInfo
     *
     * Returns the OCR-result of a document
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentOcrResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentOcrResultWithHttpInfo($id, string $contentType = self::contentTypes['documentOcrResult'][0])
    {
        $request = $this->documentOcrResultRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentOcrResultAsync
     *
     * Returns the OCR-result of a document
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentOcrResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentOcrResultAsync($id, string $contentType = self::contentTypes['documentOcrResult'][0])
    {
        return $this->documentOcrResultAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentOcrResultAsyncWithHttpInfo
     *
     * Returns the OCR-result of a document
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentOcrResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentOcrResultAsyncWithHttpInfo($id, string $contentType = self::contentTypes['documentOcrResult'][0])
    {
        $returnType = 'string';
        $request = $this->documentOcrResultRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentOcrResult'
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentOcrResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentOcrResultRequest($id, string $contentType = self::contentTypes['documentOcrResult'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentOcrResult'
            );
        }


        $resourcePath = '/document/{id}/ocr-result';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentPdf
     *
     * Document
     *
     * @param  int $id Document id (required)
     * @param  bool $original original (optional, default to false)
     * @param  string $annotations Comma separated list of annotations to export. The following values are valid: \&quot;stamp\&quot;, \&quot;text\&quot;, \&quot;symbol\&quot; and \&quot;note\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentPdf'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function documentPdf($id, $original = false, $annotations = null, string $contentType = self::contentTypes['documentPdf'][0])
    {
        list($response) = $this->documentPdfWithHttpInfo($id, $original, $annotations, $contentType);
        return $response;
    }

    /**
     * Operation documentPdfWithHttpInfo
     *
     * Document
     *
     * @param  int $id Document id (required)
     * @param  bool $original (optional, default to false)
     * @param  string $annotations Comma separated list of annotations to export. The following values are valid: \&quot;stamp\&quot;, \&quot;text\&quot;, \&quot;symbol\&quot; and \&quot;note\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentPdf'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentPdfWithHttpInfo($id, $original = false, $annotations = null, string $contentType = self::contentTypes['documentPdf'][0])
    {
        $request = $this->documentPdfRequest($id, $original, $annotations, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentPdfAsync
     *
     * Document
     *
     * @param  int $id Document id (required)
     * @param  bool $original (optional, default to false)
     * @param  string $annotations Comma separated list of annotations to export. The following values are valid: \&quot;stamp\&quot;, \&quot;text\&quot;, \&quot;symbol\&quot; and \&quot;note\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentPdf'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentPdfAsync($id, $original = false, $annotations = null, string $contentType = self::contentTypes['documentPdf'][0])
    {
        return $this->documentPdfAsyncWithHttpInfo($id, $original, $annotations, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentPdfAsyncWithHttpInfo
     *
     * Document
     *
     * @param  int $id Document id (required)
     * @param  bool $original (optional, default to false)
     * @param  string $annotations Comma separated list of annotations to export. The following values are valid: \&quot;stamp\&quot;, \&quot;text\&quot;, \&quot;symbol\&quot; and \&quot;note\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentPdf'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentPdfAsyncWithHttpInfo($id, $original = false, $annotations = null, string $contentType = self::contentTypes['documentPdf'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->documentPdfRequest($id, $original, $annotations, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentPdf'
     *
     * @param  int $id Document id (required)
     * @param  bool $original (optional, default to false)
     * @param  string $annotations Comma separated list of annotations to export. The following values are valid: \&quot;stamp\&quot;, \&quot;text\&quot;, \&quot;symbol\&quot; and \&quot;note\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentPdf'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentPdfRequest($id, $original = false, $annotations = null, string $contentType = self::contentTypes['documentPdf'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentPdf'
            );
        }




        $resourcePath = '/document/{id}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $original,
            'original', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $annotations,
            'annotations', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentRename
     *
     * @param  int $id Document id (required)
     * @param  string $new_name new_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentRename'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function documentRename($id, $new_name, string $contentType = self::contentTypes['documentRename'][0])
    {
        $this->documentRenameWithHttpInfo($id, $new_name, $contentType);
    }

    /**
     * Operation documentRenameWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string $new_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentRename'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentRenameWithHttpInfo($id, $new_name, string $contentType = self::contentTypes['documentRename'][0])
    {
        $request = $this->documentRenameRequest($id, $new_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation documentRenameAsync
     *
     * @param  int $id Document id (required)
     * @param  string $new_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentRenameAsync($id, $new_name, string $contentType = self::contentTypes['documentRename'][0])
    {
        return $this->documentRenameAsyncWithHttpInfo($id, $new_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentRenameAsyncWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string $new_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentRenameAsyncWithHttpInfo($id, $new_name, string $contentType = self::contentTypes['documentRename'][0])
    {
        $returnType = '';
        $request = $this->documentRenameRequest($id, $new_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentRename'
     *
     * @param  int $id Document id (required)
     * @param  string $new_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentRenameRequest($id, $new_name, string $contentType = self::contentTypes['documentRename'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentRename'
            );
        }

        // verify the required parameter 'new_name' is set
        if ($new_name === null || (is_array($new_name) && count($new_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_name when calling documentRename'
            );
        }


        $resourcePath = '/document/{id}/rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($new_name !== null) {
            $formParams['new-name'] = ObjectSerializer::toFormValue($new_name);
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentUploadedWith
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadedWith'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int[]
     */
    public function documentUploadedWith($id, string $contentType = self::contentTypes['documentUploadedWith'][0])
    {
        list($response) = $this->documentUploadedWithWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation documentUploadedWithWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadedWith'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int[], HTTP status code, HTTP response headers (array of strings)
     */
    public function documentUploadedWithWithHttpInfo($id, string $contentType = self::contentTypes['documentUploadedWith'][0])
    {
        $request = $this->documentUploadedWithRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation documentUploadedWithAsync
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadedWith'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentUploadedWithAsync($id, string $contentType = self::contentTypes['documentUploadedWith'][0])
    {
        return $this->documentUploadedWithAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentUploadedWithAsyncWithHttpInfo
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadedWith'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentUploadedWithAsyncWithHttpInfo($id, string $contentType = self::contentTypes['documentUploadedWith'][0])
    {
        $returnType = 'int[]';
        $request = $this->documentUploadedWithRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentUploadedWith'
     *
     * @param  int $id Document id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadedWith'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentUploadedWithRequest($id, string $contentType = self::contentTypes['documentUploadedWith'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentUploadedWith'
            );
        }


        $resourcePath = '/document/{id}/uploaded-with';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
