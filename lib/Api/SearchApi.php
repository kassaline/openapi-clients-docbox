<?php
/**
 * SearchApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Docbox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DOCBOX® API
 *
 * The DOCBOX® REST API makes it possible to integrate the DOCBOX® into third-party programs such as ERP or CRM applications. The third-party programs can access certain DOCBOX® functions, for example to archive documents in the DOCBOX® or to search for documents in it.  The api is available under https://{docbox-host}:{api-port}/api/v2. The default port is 8081 and should not be mistaken with the port of the webapp.  To authenticate to the API you must pass the API-Key header. Api keys can be configured by administrators in the modules->API section. If you are using the cloud version of DOCBOX® you must also pass the Cloud-ID header with your Cloudid.
 *
 * The version of the OpenAPI document: 7.6.0
 * Contact: support@docbox.eu
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Docbox\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Docbox\ApiException;
use OpenAPI\Client\Docbox\Configuration;
use OpenAPI\Client\Docbox\HeaderSelector;
use OpenAPI\Client\Docbox\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Docbox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'searchPOST' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchPOST
     *
     * @param  int $pagination_size Anzahl der Dokumente die im Ergebnis maximal zurückgegeben werden sollen, d.h. dieser Parameter gibt die Größe des Ergbnisfensters für das Paging des Suchergebnisses an. (optional, default to 10)
     * @param  int $pagination_page Gibt den Index des Ergebnisfensters an, welches angezeigt werden soll. Das erste Ergebnisfenster entspricht dabei dem Index 0. Durch Erhöhung des Index um 1 gelangt man zum nächsten Ergebnisfenster mit den nächsten Suchtreffern. Beispiel: Bei 27 gefundenen Dokumenten insgesamt und einer pagination-size von 10 liegt der Index des Ergebnisfensters zwischen 0 und 2 (optional, default to 0)
     * @param  string $fulltext_all Liste mit Texten, die alle gemeinsam auf jeder Trefferseite vorkommen müssen. (optional)
     * @param  string $fulltext_one Liste mit Texten, von denen mindestens einer auf jeder Trefferseite vorkommen muss. (optional)
     * @param  string $fulltext_none Liste mit Texten, von denen keiner auf den Trefferseiten vorkommen darf. (optional)
     * @param  string $from_date Sucht nur nach Seiten deren Erstelldatum nach diesem Zeitpunkt liegt. (optional)
     * @param  string $to_date Sucht nur nach Seiten deren Erstelldatum vor diesem Zeitpunkt liegt. (optional)
     * @param  string $followup_terms Liste mit Texten die alle gemeinsam in den Wiedervorlage-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $note_terms Liste mit Texten die alle gemeinsam in den Notiz-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $keyword_terms Liste von Texten die alle gemeinsam in den Schlagwörtern einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_inclusive Liste mit Namen aller Stempel, die gemeinsam auf einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_exclusive Liste mit Namen aller Stempel, von denen keiner auf einer Seite vorkommen darf. (optional)
     * @param  string $document_name_terms Liste von Texten die alle im Dokumentennamen einer Seite vorkommen müssen. (optional)
     * @param  string $folder_name_terms Liste von Texten die alle im Ordner-Pfad einer Seite vorkommen müssen. (optional)
     * @param  string $location Pfad zu einem Ordner, auf den die Suche beschränkt werden soll (z. B. „/Muster GmbH/Rechnungen/“, „INBOX/Administrator“). Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  int $location_folder_id Ordner-Id, auf den die Suche beschränkt werden soll. Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  bool $recursive Bestimmt ob auch in Unterordner bei location gesucht wird. (optional, default to true)
     * @param  int $archiver_id ID des Users der die zu suchenden Seiten archiviert haben muss. (optional)
     * @param  string $workflow_name Name des Workflows in dem sich die zu suchenden Seiten aktuell befinden müssen. Durch Angabe von „*“ wird in allen Workflows gesucht. (optional)
     * @param  string $workflow_state Name des Workflow-Knotens, in dem sich die zu suchenden Seiten aktuell befinden müssen. (optional)
     * @param  string $document_type Name oder Alias-Name eines Dokumenten-Typs, der allen zu suchenden Dokumenten zugewiesen sein muss. (optional)
     * @param  bool $include_trash Gibt an, ob auch Dokumente im Papierkorb mit durchsucht werden sollen. (optional, default to false)
     * @param  string $external_id Text der in einer externen ID eines Dokuments vorkommen muss, damit es gefunden wird. (optional)
     * @param  string $external_metadata Sucht Dokumente anhand ihrer externen Metadaten. Für jedes Metadatum in der Liste muss einem Dokument, damit es gefunden wird, ebenfalls ein Metadatum mit genau diesem Key zugeordnet sein und dessen Value den zu suchenden Value enthalten (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Docbox\Model\SearchPOST200Response
     */
    public function searchPOST($pagination_size = 10, $pagination_page = 0, $fulltext_all = null, $fulltext_one = null, $fulltext_none = null, $from_date = null, $to_date = null, $followup_terms = null, $note_terms = null, $keyword_terms = null, $stamps_inclusive = null, $stamps_exclusive = null, $document_name_terms = null, $folder_name_terms = null, $location = null, $location_folder_id = null, $recursive = true, $archiver_id = null, $workflow_name = null, $workflow_state = null, $document_type = null, $include_trash = false, $external_id = null, $external_metadata = null, string $contentType = self::contentTypes['searchPOST'][0])
    {
        list($response) = $this->searchPOSTWithHttpInfo($pagination_size, $pagination_page, $fulltext_all, $fulltext_one, $fulltext_none, $from_date, $to_date, $followup_terms, $note_terms, $keyword_terms, $stamps_inclusive, $stamps_exclusive, $document_name_terms, $folder_name_terms, $location, $location_folder_id, $recursive, $archiver_id, $workflow_name, $workflow_state, $document_type, $include_trash, $external_id, $external_metadata, $contentType);
        return $response;
    }

    /**
     * Operation searchPOSTWithHttpInfo
     *
     * @param  int $pagination_size Anzahl der Dokumente die im Ergebnis maximal zurückgegeben werden sollen, d.h. dieser Parameter gibt die Größe des Ergbnisfensters für das Paging des Suchergebnisses an. (optional, default to 10)
     * @param  int $pagination_page Gibt den Index des Ergebnisfensters an, welches angezeigt werden soll. Das erste Ergebnisfenster entspricht dabei dem Index 0. Durch Erhöhung des Index um 1 gelangt man zum nächsten Ergebnisfenster mit den nächsten Suchtreffern. Beispiel: Bei 27 gefundenen Dokumenten insgesamt und einer pagination-size von 10 liegt der Index des Ergebnisfensters zwischen 0 und 2 (optional, default to 0)
     * @param  string $fulltext_all Liste mit Texten, die alle gemeinsam auf jeder Trefferseite vorkommen müssen. (optional)
     * @param  string $fulltext_one Liste mit Texten, von denen mindestens einer auf jeder Trefferseite vorkommen muss. (optional)
     * @param  string $fulltext_none Liste mit Texten, von denen keiner auf den Trefferseiten vorkommen darf. (optional)
     * @param  string $from_date Sucht nur nach Seiten deren Erstelldatum nach diesem Zeitpunkt liegt. (optional)
     * @param  string $to_date Sucht nur nach Seiten deren Erstelldatum vor diesem Zeitpunkt liegt. (optional)
     * @param  string $followup_terms Liste mit Texten die alle gemeinsam in den Wiedervorlage-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $note_terms Liste mit Texten die alle gemeinsam in den Notiz-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $keyword_terms Liste von Texten die alle gemeinsam in den Schlagwörtern einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_inclusive Liste mit Namen aller Stempel, die gemeinsam auf einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_exclusive Liste mit Namen aller Stempel, von denen keiner auf einer Seite vorkommen darf. (optional)
     * @param  string $document_name_terms Liste von Texten die alle im Dokumentennamen einer Seite vorkommen müssen. (optional)
     * @param  string $folder_name_terms Liste von Texten die alle im Ordner-Pfad einer Seite vorkommen müssen. (optional)
     * @param  string $location Pfad zu einem Ordner, auf den die Suche beschränkt werden soll (z. B. „/Muster GmbH/Rechnungen/“, „INBOX/Administrator“). Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  int $location_folder_id Ordner-Id, auf den die Suche beschränkt werden soll. Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  bool $recursive Bestimmt ob auch in Unterordner bei location gesucht wird. (optional, default to true)
     * @param  int $archiver_id ID des Users der die zu suchenden Seiten archiviert haben muss. (optional)
     * @param  string $workflow_name Name des Workflows in dem sich die zu suchenden Seiten aktuell befinden müssen. Durch Angabe von „*“ wird in allen Workflows gesucht. (optional)
     * @param  string $workflow_state Name des Workflow-Knotens, in dem sich die zu suchenden Seiten aktuell befinden müssen. (optional)
     * @param  string $document_type Name oder Alias-Name eines Dokumenten-Typs, der allen zu suchenden Dokumenten zugewiesen sein muss. (optional)
     * @param  bool $include_trash Gibt an, ob auch Dokumente im Papierkorb mit durchsucht werden sollen. (optional, default to false)
     * @param  string $external_id Text der in einer externen ID eines Dokuments vorkommen muss, damit es gefunden wird. (optional)
     * @param  string $external_metadata Sucht Dokumente anhand ihrer externen Metadaten. Für jedes Metadatum in der Liste muss einem Dokument, damit es gefunden wird, ebenfalls ein Metadatum mit genau diesem Key zugeordnet sein und dessen Value den zu suchenden Value enthalten (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Docbox\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Docbox\Model\SearchPOST200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPOSTWithHttpInfo($pagination_size = 10, $pagination_page = 0, $fulltext_all = null, $fulltext_one = null, $fulltext_none = null, $from_date = null, $to_date = null, $followup_terms = null, $note_terms = null, $keyword_terms = null, $stamps_inclusive = null, $stamps_exclusive = null, $document_name_terms = null, $folder_name_terms = null, $location = null, $location_folder_id = null, $recursive = true, $archiver_id = null, $workflow_name = null, $workflow_state = null, $document_type = null, $include_trash = false, $external_id = null, $external_metadata = null, string $contentType = self::contentTypes['searchPOST'][0])
    {
        $request = $this->searchPOSTRequest($pagination_size, $pagination_page, $fulltext_all, $fulltext_one, $fulltext_none, $from_date, $to_date, $followup_terms, $note_terms, $keyword_terms, $stamps_inclusive, $stamps_exclusive, $document_name_terms, $folder_name_terms, $location, $location_folder_id, $recursive, $archiver_id, $workflow_name, $workflow_state, $document_type, $include_trash, $external_id, $external_metadata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Docbox\Model\SearchPOST200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Docbox\Model\SearchPOST200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Docbox\Model\SearchPOST200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Docbox\Model\SearchPOST200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Docbox\Model\SearchPOST200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPOSTAsync
     *
     * @param  int $pagination_size Anzahl der Dokumente die im Ergebnis maximal zurückgegeben werden sollen, d.h. dieser Parameter gibt die Größe des Ergbnisfensters für das Paging des Suchergebnisses an. (optional, default to 10)
     * @param  int $pagination_page Gibt den Index des Ergebnisfensters an, welches angezeigt werden soll. Das erste Ergebnisfenster entspricht dabei dem Index 0. Durch Erhöhung des Index um 1 gelangt man zum nächsten Ergebnisfenster mit den nächsten Suchtreffern. Beispiel: Bei 27 gefundenen Dokumenten insgesamt und einer pagination-size von 10 liegt der Index des Ergebnisfensters zwischen 0 und 2 (optional, default to 0)
     * @param  string $fulltext_all Liste mit Texten, die alle gemeinsam auf jeder Trefferseite vorkommen müssen. (optional)
     * @param  string $fulltext_one Liste mit Texten, von denen mindestens einer auf jeder Trefferseite vorkommen muss. (optional)
     * @param  string $fulltext_none Liste mit Texten, von denen keiner auf den Trefferseiten vorkommen darf. (optional)
     * @param  string $from_date Sucht nur nach Seiten deren Erstelldatum nach diesem Zeitpunkt liegt. (optional)
     * @param  string $to_date Sucht nur nach Seiten deren Erstelldatum vor diesem Zeitpunkt liegt. (optional)
     * @param  string $followup_terms Liste mit Texten die alle gemeinsam in den Wiedervorlage-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $note_terms Liste mit Texten die alle gemeinsam in den Notiz-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $keyword_terms Liste von Texten die alle gemeinsam in den Schlagwörtern einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_inclusive Liste mit Namen aller Stempel, die gemeinsam auf einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_exclusive Liste mit Namen aller Stempel, von denen keiner auf einer Seite vorkommen darf. (optional)
     * @param  string $document_name_terms Liste von Texten die alle im Dokumentennamen einer Seite vorkommen müssen. (optional)
     * @param  string $folder_name_terms Liste von Texten die alle im Ordner-Pfad einer Seite vorkommen müssen. (optional)
     * @param  string $location Pfad zu einem Ordner, auf den die Suche beschränkt werden soll (z. B. „/Muster GmbH/Rechnungen/“, „INBOX/Administrator“). Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  int $location_folder_id Ordner-Id, auf den die Suche beschränkt werden soll. Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  bool $recursive Bestimmt ob auch in Unterordner bei location gesucht wird. (optional, default to true)
     * @param  int $archiver_id ID des Users der die zu suchenden Seiten archiviert haben muss. (optional)
     * @param  string $workflow_name Name des Workflows in dem sich die zu suchenden Seiten aktuell befinden müssen. Durch Angabe von „*“ wird in allen Workflows gesucht. (optional)
     * @param  string $workflow_state Name des Workflow-Knotens, in dem sich die zu suchenden Seiten aktuell befinden müssen. (optional)
     * @param  string $document_type Name oder Alias-Name eines Dokumenten-Typs, der allen zu suchenden Dokumenten zugewiesen sein muss. (optional)
     * @param  bool $include_trash Gibt an, ob auch Dokumente im Papierkorb mit durchsucht werden sollen. (optional, default to false)
     * @param  string $external_id Text der in einer externen ID eines Dokuments vorkommen muss, damit es gefunden wird. (optional)
     * @param  string $external_metadata Sucht Dokumente anhand ihrer externen Metadaten. Für jedes Metadatum in der Liste muss einem Dokument, damit es gefunden wird, ebenfalls ein Metadatum mit genau diesem Key zugeordnet sein und dessen Value den zu suchenden Value enthalten (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPOSTAsync($pagination_size = 10, $pagination_page = 0, $fulltext_all = null, $fulltext_one = null, $fulltext_none = null, $from_date = null, $to_date = null, $followup_terms = null, $note_terms = null, $keyword_terms = null, $stamps_inclusive = null, $stamps_exclusive = null, $document_name_terms = null, $folder_name_terms = null, $location = null, $location_folder_id = null, $recursive = true, $archiver_id = null, $workflow_name = null, $workflow_state = null, $document_type = null, $include_trash = false, $external_id = null, $external_metadata = null, string $contentType = self::contentTypes['searchPOST'][0])
    {
        return $this->searchPOSTAsyncWithHttpInfo($pagination_size, $pagination_page, $fulltext_all, $fulltext_one, $fulltext_none, $from_date, $to_date, $followup_terms, $note_terms, $keyword_terms, $stamps_inclusive, $stamps_exclusive, $document_name_terms, $folder_name_terms, $location, $location_folder_id, $recursive, $archiver_id, $workflow_name, $workflow_state, $document_type, $include_trash, $external_id, $external_metadata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPOSTAsyncWithHttpInfo
     *
     * @param  int $pagination_size Anzahl der Dokumente die im Ergebnis maximal zurückgegeben werden sollen, d.h. dieser Parameter gibt die Größe des Ergbnisfensters für das Paging des Suchergebnisses an. (optional, default to 10)
     * @param  int $pagination_page Gibt den Index des Ergebnisfensters an, welches angezeigt werden soll. Das erste Ergebnisfenster entspricht dabei dem Index 0. Durch Erhöhung des Index um 1 gelangt man zum nächsten Ergebnisfenster mit den nächsten Suchtreffern. Beispiel: Bei 27 gefundenen Dokumenten insgesamt und einer pagination-size von 10 liegt der Index des Ergebnisfensters zwischen 0 und 2 (optional, default to 0)
     * @param  string $fulltext_all Liste mit Texten, die alle gemeinsam auf jeder Trefferseite vorkommen müssen. (optional)
     * @param  string $fulltext_one Liste mit Texten, von denen mindestens einer auf jeder Trefferseite vorkommen muss. (optional)
     * @param  string $fulltext_none Liste mit Texten, von denen keiner auf den Trefferseiten vorkommen darf. (optional)
     * @param  string $from_date Sucht nur nach Seiten deren Erstelldatum nach diesem Zeitpunkt liegt. (optional)
     * @param  string $to_date Sucht nur nach Seiten deren Erstelldatum vor diesem Zeitpunkt liegt. (optional)
     * @param  string $followup_terms Liste mit Texten die alle gemeinsam in den Wiedervorlage-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $note_terms Liste mit Texten die alle gemeinsam in den Notiz-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $keyword_terms Liste von Texten die alle gemeinsam in den Schlagwörtern einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_inclusive Liste mit Namen aller Stempel, die gemeinsam auf einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_exclusive Liste mit Namen aller Stempel, von denen keiner auf einer Seite vorkommen darf. (optional)
     * @param  string $document_name_terms Liste von Texten die alle im Dokumentennamen einer Seite vorkommen müssen. (optional)
     * @param  string $folder_name_terms Liste von Texten die alle im Ordner-Pfad einer Seite vorkommen müssen. (optional)
     * @param  string $location Pfad zu einem Ordner, auf den die Suche beschränkt werden soll (z. B. „/Muster GmbH/Rechnungen/“, „INBOX/Administrator“). Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  int $location_folder_id Ordner-Id, auf den die Suche beschränkt werden soll. Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  bool $recursive Bestimmt ob auch in Unterordner bei location gesucht wird. (optional, default to true)
     * @param  int $archiver_id ID des Users der die zu suchenden Seiten archiviert haben muss. (optional)
     * @param  string $workflow_name Name des Workflows in dem sich die zu suchenden Seiten aktuell befinden müssen. Durch Angabe von „*“ wird in allen Workflows gesucht. (optional)
     * @param  string $workflow_state Name des Workflow-Knotens, in dem sich die zu suchenden Seiten aktuell befinden müssen. (optional)
     * @param  string $document_type Name oder Alias-Name eines Dokumenten-Typs, der allen zu suchenden Dokumenten zugewiesen sein muss. (optional)
     * @param  bool $include_trash Gibt an, ob auch Dokumente im Papierkorb mit durchsucht werden sollen. (optional, default to false)
     * @param  string $external_id Text der in einer externen ID eines Dokuments vorkommen muss, damit es gefunden wird. (optional)
     * @param  string $external_metadata Sucht Dokumente anhand ihrer externen Metadaten. Für jedes Metadatum in der Liste muss einem Dokument, damit es gefunden wird, ebenfalls ein Metadatum mit genau diesem Key zugeordnet sein und dessen Value den zu suchenden Value enthalten (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPOSTAsyncWithHttpInfo($pagination_size = 10, $pagination_page = 0, $fulltext_all = null, $fulltext_one = null, $fulltext_none = null, $from_date = null, $to_date = null, $followup_terms = null, $note_terms = null, $keyword_terms = null, $stamps_inclusive = null, $stamps_exclusive = null, $document_name_terms = null, $folder_name_terms = null, $location = null, $location_folder_id = null, $recursive = true, $archiver_id = null, $workflow_name = null, $workflow_state = null, $document_type = null, $include_trash = false, $external_id = null, $external_metadata = null, string $contentType = self::contentTypes['searchPOST'][0])
    {
        $returnType = '\OpenAPI\Client\Docbox\Model\SearchPOST200Response';
        $request = $this->searchPOSTRequest($pagination_size, $pagination_page, $fulltext_all, $fulltext_one, $fulltext_none, $from_date, $to_date, $followup_terms, $note_terms, $keyword_terms, $stamps_inclusive, $stamps_exclusive, $document_name_terms, $folder_name_terms, $location, $location_folder_id, $recursive, $archiver_id, $workflow_name, $workflow_state, $document_type, $include_trash, $external_id, $external_metadata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPOST'
     *
     * @param  int $pagination_size Anzahl der Dokumente die im Ergebnis maximal zurückgegeben werden sollen, d.h. dieser Parameter gibt die Größe des Ergbnisfensters für das Paging des Suchergebnisses an. (optional, default to 10)
     * @param  int $pagination_page Gibt den Index des Ergebnisfensters an, welches angezeigt werden soll. Das erste Ergebnisfenster entspricht dabei dem Index 0. Durch Erhöhung des Index um 1 gelangt man zum nächsten Ergebnisfenster mit den nächsten Suchtreffern. Beispiel: Bei 27 gefundenen Dokumenten insgesamt und einer pagination-size von 10 liegt der Index des Ergebnisfensters zwischen 0 und 2 (optional, default to 0)
     * @param  string $fulltext_all Liste mit Texten, die alle gemeinsam auf jeder Trefferseite vorkommen müssen. (optional)
     * @param  string $fulltext_one Liste mit Texten, von denen mindestens einer auf jeder Trefferseite vorkommen muss. (optional)
     * @param  string $fulltext_none Liste mit Texten, von denen keiner auf den Trefferseiten vorkommen darf. (optional)
     * @param  string $from_date Sucht nur nach Seiten deren Erstelldatum nach diesem Zeitpunkt liegt. (optional)
     * @param  string $to_date Sucht nur nach Seiten deren Erstelldatum vor diesem Zeitpunkt liegt. (optional)
     * @param  string $followup_terms Liste mit Texten die alle gemeinsam in den Wiedervorlage-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $note_terms Liste mit Texten die alle gemeinsam in den Notiz-Texten einer Seite vorkommen müssen. (optional)
     * @param  string $keyword_terms Liste von Texten die alle gemeinsam in den Schlagwörtern einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_inclusive Liste mit Namen aller Stempel, die gemeinsam auf einer Seite vorkommen müssen. (optional)
     * @param  string $stamps_exclusive Liste mit Namen aller Stempel, von denen keiner auf einer Seite vorkommen darf. (optional)
     * @param  string $document_name_terms Liste von Texten die alle im Dokumentennamen einer Seite vorkommen müssen. (optional)
     * @param  string $folder_name_terms Liste von Texten die alle im Ordner-Pfad einer Seite vorkommen müssen. (optional)
     * @param  string $location Pfad zu einem Ordner, auf den die Suche beschränkt werden soll (z. B. „/Muster GmbH/Rechnungen/“, „INBOX/Administrator“). Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  int $location_folder_id Ordner-Id, auf den die Suche beschränkt werden soll. Es wird auch in allen Unterordnern dieses Pfades gesucht (außer recursive ist auf false gesetzt). (optional)
     * @param  bool $recursive Bestimmt ob auch in Unterordner bei location gesucht wird. (optional, default to true)
     * @param  int $archiver_id ID des Users der die zu suchenden Seiten archiviert haben muss. (optional)
     * @param  string $workflow_name Name des Workflows in dem sich die zu suchenden Seiten aktuell befinden müssen. Durch Angabe von „*“ wird in allen Workflows gesucht. (optional)
     * @param  string $workflow_state Name des Workflow-Knotens, in dem sich die zu suchenden Seiten aktuell befinden müssen. (optional)
     * @param  string $document_type Name oder Alias-Name eines Dokumenten-Typs, der allen zu suchenden Dokumenten zugewiesen sein muss. (optional)
     * @param  bool $include_trash Gibt an, ob auch Dokumente im Papierkorb mit durchsucht werden sollen. (optional, default to false)
     * @param  string $external_id Text der in einer externen ID eines Dokuments vorkommen muss, damit es gefunden wird. (optional)
     * @param  string $external_metadata Sucht Dokumente anhand ihrer externen Metadaten. Für jedes Metadatum in der Liste muss einem Dokument, damit es gefunden wird, ebenfalls ein Metadatum mit genau diesem Key zugeordnet sein und dessen Value den zu suchenden Value enthalten (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchPOSTRequest($pagination_size = 10, $pagination_page = 0, $fulltext_all = null, $fulltext_one = null, $fulltext_none = null, $from_date = null, $to_date = null, $followup_terms = null, $note_terms = null, $keyword_terms = null, $stamps_inclusive = null, $stamps_exclusive = null, $document_name_terms = null, $folder_name_terms = null, $location = null, $location_folder_id = null, $recursive = true, $archiver_id = null, $workflow_name = null, $workflow_state = null, $document_type = null, $include_trash = false, $external_id = null, $external_metadata = null, string $contentType = self::contentTypes['searchPOST'][0])
    {

        if ($pagination_size !== null && $pagination_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$pagination_size" when calling SearchApi.searchPOST, must be smaller than or equal to 100.');
        }
        if ($pagination_size !== null && $pagination_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagination_size" when calling SearchApi.searchPOST, must be bigger than or equal to 1.');
        }
        
        if ($pagination_page !== null && $pagination_page < 0) {
            throw new \InvalidArgumentException('invalid value for "$pagination_page" when calling SearchApi.searchPOST, must be bigger than or equal to 0.');
        }
        























        $resourcePath = '/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_size,
            'pagination-size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagination_page,
            'pagination-page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulltext_all,
            'fulltext-all', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulltext_one,
            'fulltext-one', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulltext_none,
            'fulltext-none', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'to-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $followup_terms,
            'followup-terms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $note_terms,
            'note-terms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword_terms,
            'keyword-terms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stamps_inclusive,
            'stamps-inclusive', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stamps_exclusive,
            'stamps-exclusive', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_name_terms,
            'document-name-terms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $folder_name_terms,
            'folder-name-terms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location,
            'location', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location_folder_id,
            'location-folder-id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursive,
            'recursive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $archiver_id,
            'archiver-id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workflow_name,
            'workflow-name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workflow_state,
            'workflow-state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_type,
            'document-type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_trash,
            'include-trash', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_id,
            'external-id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_metadata,
            'external-metadata', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Cloud-ID');
        if ($apiKey !== null) {
            $headers['Cloud-ID'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
